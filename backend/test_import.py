from openai import OpenAI
import os

print("try OpenAI")
CATEGORIES = [
	"1) การเพิ่มขีดความสามารถทางการแข่งขัน โดยเพิ่มรายได้ทางตรง (Direct Revenue) และทางอ้อม (Indirect Revenue)",
	"2) การสร้างการเติบโตสินเชื่อคุณภาพ สินเชื่อยั่งยืนในกลุ่ม Secure Port",
	"3) การบริหารจัดการหนี้ NPLและการบริหารจัดการหนี้ถึงกำหนดชำระ",
	"4) การพัฒนาศักยภาพและเพิ่มขีดความสามารถของลูกค้าพักหนี้",			
	"5) การบริหารจัดการคุณภาพสินเชื่อเพื่อความยั่งยืน",
	"6) ผลิตภัณฑ์หรือบริการที่สอดคล้องกับแนวคิด ESG",
	"7) การปรับปรุงกระบวนการทำงานเพื่อลดต้นทุนการดำเนินงาน สร้างความยั่งยืนระยะยาว",
	"8) การสร้างความสัมพันธ์กับลูกค้า เพื่อเพิ่มปริมาณธุรกิจ",
	"9) การยกระดับกระบวนการทำงาน/การให้บริการด้วยดิจิทัลและข้อมูล",
	"10) การสร้างมูลค่าเพิ่มทางธุรกิจ เชื่อมโยงตลาดและเพิ่มขีดความสามารถการแข่งขันของเกษตรกรและชุมชน",
]
 
print("CATEGORIES: ", CATEGORIES)
answer_text='Generative AI Positive Response Assistantคือระบบ AI ที่ช่วยแนะนำคำตอบเชิงบวกและแนวทางการแก้ปัญหาให้เจ้าหน้าที่บริการลูกค้า โดยอิงจาก:ข้อมูลคำถามหรือข้อร้องเรียนของลูกค้าบริบทของลูกค้า เช่น ประวัติการใช้บริการ, สถานะบัญชี, ความต้องการเฉพาะระบบจะสร้างคำตอบที่:มีน้ำเสียงเชิงบวก (Positive Tone)มีความเข้าใจและเห็นใจลูกค้า (Empathetic)มีแนวทางการแก้ปัญหาที่ชัดเจนและเหมาะสมสามารถใช้งานผ่าน Dashboard หรือระบบแนะนำอัตโนมัติในช่องทาง Chat/Call เพื่อให้เจ้าหน้าที่เลือกใช้หรือปรับแต่งก่อนส่งให้ลูกค้า'

# Lazy import to avoid dependency if not needed
api_key=""

os.environ["OPENAI_API_KEY"] = api_key

client = OpenAI()
print("client: ", client)
prompt = (
    "คุณคือนักจัดหมวดหมู่ จัดข้อความคำตอบต่อไปนี้ให้เป็นหนึ่งในหมวดหมู่: "
    + ", ".join(CATEGORIES)
    + ".\nตอบกลับเฉพาะชื่อหมวดหมู่เท่านั้น.\nข้อความ: "
    + answer_text
)
print("prompt: ", prompt)

resp = client.chat.completions.create(
    model="gpt-4.1-mini",
    messages=[{"role": "user", "content": prompt}],
    max_tokens=100,
    temperature=0,
)
choice = resp.choices[0].message.content.strip() if resp.choices else ""			
print(f"OpenAI choice: {choice}")
